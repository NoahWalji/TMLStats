{"ast":null,"code":"var _jsxFileName = \"/Users/noahwalji/Desktop/Noah/TMLStats 2.0/frontend/src/Game.js\";\nimport React from \"react\";\nimport './index.css';\nimport Team from \"./Team.js\";\nimport { trackPromise } from 'react-promise-tracker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      nextGame: [],\n      awayTeam: [],\n      subText: null,\n      awayTeamScore: null,\n      homeTeam: [],\n      homeTeamScore: null\n    };\n  }\n\n  async componentDidMount() {\n    if (this.props.liveGame) {\n      var timeLeft = this.props.nextGame.scoring.currentPeriodSecondsRemaining;\n      var minutes = Math.floor(timeLeft / 60);\n      var seconds = timeLeft % 60;\n      this.setState({\n        awayTeam: this.props.nextGame.game.awayTeam,\n        awayTeamScore: this.props.nextGame.scoring.awayScoreTotal,\n        homeTeam: this.props.nextGame.game.homeTeam,\n        homeTeamScore: this.props.nextGame.scoring.homeScoreTotal,\n        subText: \"P\" + this.props.nextGame.scoring.currentPeriod + \" (\" + minutes + \":\" + seconds + \")\",\n        isLoaded: true\n      });\n      this.getSubText();\n    } else {\n      let date = new Date(this.props.nextGame.schedule.startTime);\n      let options = {\n        weekday: 'long',\n        month: 'long',\n        day: 'numeric',\n        hour: 'numeric',\n        minute: '2-digit'\n      };\n      this.setState({\n        awayTeam: this.props.nextGame.schedule.awayTeam,\n        awayTeamScore: this.props.nextGame.score.awayScoreTotal,\n        homeTeam: this.props.nextGame.schedule.homeTeam,\n        homeTeamScore: this.props.nextGame.score.homeScoreTotal,\n        subText: date.toLocaleString('en-US', options),\n        isLoaded: true\n      });\n    }\n  }\n\n  getSubText() {\n    if (this.props.nextGame.scoring.currentPeriod === null) {\n      this.setState({\n        subText: \"Intermission\"\n      });\n    } else if (this.props.nextGame.scoring.currentPeriod > 3) {\n      this.setState({\n        subText: \"Period: Overtime\"\n      });\n    }\n\n    if (this.props.nextGame.game.playedStatus !== \"LIVE\") {\n      this.setState({\n        subText: \"Final Score\"\n      });\n    }\n  }\n\n  render() {\n    if (this.state.isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game\",\n        children: [this.state.isLoaded && /*#__PURE__*/_jsxDEV(Team, {\n          type: \"awayTeam\",\n          id: this.state.awayTeam.id,\n          abbreviation: this.state.awayTeam.abbreviation,\n          score: this.state.awayTeamScore\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 46\n        }, this), this.state.isLoaded && /*#__PURE__*/_jsxDEV(Team, {\n          type: \"homeTeam\",\n          id: this.state.homeTeam.id,\n          abbreviation: this.state.homeTeam.abbreviation,\n          score: this.state.homeTeamScore\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 46\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"subText\",\n          children: this.state.subText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 20\n      }, this);\n    }\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/noahwalji/Desktop/Noah/TMLStats 2.0/frontend/src/Game.js"],"names":["React","Team","trackPromise","Game","Component","constructor","props","state","isLoaded","nextGame","awayTeam","subText","awayTeamScore","homeTeam","homeTeamScore","componentDidMount","liveGame","timeLeft","scoring","currentPeriodSecondsRemaining","minutes","Math","floor","seconds","setState","game","awayScoreTotal","homeScoreTotal","currentPeriod","getSubText","date","Date","schedule","startTime","options","weekday","month","day","hour","minute","score","toLocaleString","playedStatus","render","id","abbreviation"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport './index.css'\nimport Team from \"./Team.js\"\n\nimport { trackPromise } from 'react-promise-tracker';\n\nclass Game extends React.Component {\n\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoaded: false,\n            nextGame: [],\n            awayTeam: [],\n            subText: null,\n            awayTeamScore: null,\n            homeTeam: [],\n            homeTeamScore: null\n        }\n    }\n\n    async componentDidMount() {\n        if (this.props.liveGame) {\n            var timeLeft = this.props.nextGame.scoring.currentPeriodSecondsRemaining; \n            var minutes = Math.floor(timeLeft/60);\n            var seconds = timeLeft % 60;\n            this.setState({\n                awayTeam: this.props.nextGame.game.awayTeam,\n                awayTeamScore: this.props.nextGame.scoring.awayScoreTotal,\n                homeTeam: this.props.nextGame.game.homeTeam,\n                homeTeamScore: this.props.nextGame.scoring.homeScoreTotal,\n                subText: \"P\" + this.props.nextGame.scoring.currentPeriod + \" (\" + minutes + \":\" + seconds + \")\",\n                isLoaded: true\n            }) \n            \n            this.getSubText()\n        }\n\n        else {\n            let date = new Date(this.props.nextGame.schedule.startTime)\n            let options = { weekday: 'long', month: 'long', day: 'numeric', hour: 'numeric', minute: '2-digit'};\n            this.setState({\n                awayTeam: this.props.nextGame.schedule.awayTeam,\n                awayTeamScore: this.props.nextGame.score.awayScoreTotal,\n                homeTeam: this.props.nextGame.schedule.homeTeam,\n                homeTeamScore: this.props.nextGame.score.homeScoreTotal,\n                subText: date.toLocaleString('en-US', options),\n                isLoaded: true\n            }) \n            \n        }    \n    }\n\n    getSubText() {\n        if (this.props.nextGame.scoring.currentPeriod === null) {\n            this.setState({subText: \"Intermission\"})\n        }\n\n        else if (this.props.nextGame.scoring.currentPeriod > 3) {\n            this.setState({subText: \"Period: Overtime\"})\n        }\n\n        if (this.props.nextGame.game.playedStatus !== \"LIVE\") {\n            this.setState({subText: \"Final Score\"})\n        }\n    }\n    \n    render() {\n\n        if (this.state.isLoaded) {\n            return (\n                <div className=\"game\">\n                    {this.state.isLoaded && (<Team type=\"awayTeam\" id={this.state.awayTeam.id} abbreviation={this.state.awayTeam.abbreviation} score={this.state.awayTeamScore}/>)}\n                    {this.state.isLoaded && (<Team type=\"homeTeam\" id={this.state.homeTeam.id} abbreviation={this.state.homeTeam.abbreviation} score={this.state.homeTeamScore}/>)}\n                    <p className=\"subText\">{this.state.subText}</p>\n                </div>\n            );\n        }\n\n        else {\n            return <div></div>\n        }\n\n      }\n}\n  export default Game"]},"metadata":{},"sourceType":"module"}